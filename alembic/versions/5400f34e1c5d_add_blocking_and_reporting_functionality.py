"""Add blocking and reporting functionality

Revision ID: 5400f34e1c5d
Revises: 46d2fa07c648
Create Date: 2025-07-02 17:50:41.071051

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5400f34e1c5d'
down_revision = '46d2fa07c648'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_conversation_last_message', table_name='conversations')
    op.drop_index('idx_conversation_participants', table_name='conversations')
    op.drop_table('conversations')
    op.drop_index('idx_participant_conversation_user', table_name='conversation_participants')
    op.drop_index('idx_participant_online', table_name='conversation_participants')
    op.drop_index('idx_participant_unread', table_name='conversation_participants')
    op.drop_index('ix_conversation_participants_id', table_name='conversation_participants')
    op.drop_table('conversation_participants')
    op.drop_index('idx_report_created_at', table_name='post_reports')
    op.drop_index('idx_report_post_id', table_name='post_reports')
    op.drop_index('idx_report_status', table_name='post_reports')
    op.drop_index('ix_post_reports_id', table_name='post_reports')
    op.drop_table('post_reports')
    op.drop_index('idx_comment_parent_id', table_name='post_comments')
    op.drop_index('idx_comment_post_created', table_name='post_comments')
    op.drop_index('idx_comment_user_id', table_name='post_comments')
    op.drop_index('ix_post_comments_id', table_name='post_comments')
    op.drop_table('post_comments')
    op.drop_index('idx_like_comment_id', table_name='post_likes')
    op.drop_index('idx_like_created_at', table_name='post_likes')
    op.drop_index('idx_like_post_id', table_name='post_likes')
    op.drop_index('idx_like_user_id', table_name='post_likes')
    op.drop_index('ix_post_likes_id', table_name='post_likes')
    op.drop_table('post_likes')
    op.drop_index('idx_friend_request_receiver_id', table_name='friend_requests')
    op.drop_index('idx_friend_request_sender_id', table_name='friend_requests')
    op.drop_index('idx_friend_request_status', table_name='friend_requests')
    op.drop_table('friend_requests')
    op.drop_index('idx_close_friend_close_friend_id', table_name='close_friends')
    op.drop_index('idx_close_friend_user_id', table_name='close_friends')
    op.drop_table('close_friends')
    op.drop_index('idx_friendship_friend_id', table_name='friendships')
    op.drop_index('idx_friendship_status', table_name='friendships')
    op.drop_index('idx_friendship_user_id', table_name='friendships')
    op.drop_table('friendships')
    op.drop_index('idx_message_conversation_created', table_name='messages')
    op.drop_index('idx_message_replied_to', table_name='messages')
    op.drop_index('idx_message_sender', table_name='messages')
    op.drop_index('idx_message_status', table_name='messages')
    op.drop_table('messages')
    op.drop_index('idx_post_created_at', table_name='posts')
    op.drop_index('idx_post_habit_id', table_name='posts')
    op.drop_index('idx_post_habit_streak', table_name='posts')
    op.drop_index('idx_post_privacy', table_name='posts')
    op.drop_index('idx_post_user_created', table_name='posts')
    op.drop_index('ix_posts_id', table_name='posts')
    op.drop_table('posts')
    op.drop_index('idx_view_post_id', table_name='post_views')
    op.drop_index('idx_view_user_id', table_name='post_views')
    op.drop_index('idx_view_viewed_at', table_name='post_views')
    op.drop_index('ix_post_views_id', table_name='post_views')
    op.drop_table('post_views')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('post_views',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('view_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('viewed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name='post_views_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='post_views_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='post_views_pkey'),
    sa.UniqueConstraint('user_id', 'post_id', name='unique_post_view')
    )
    op.create_index('ix_post_views_id', 'post_views', ['id'], unique=False)
    op.create_index('idx_view_viewed_at', 'post_views', ['viewed_at'], unique=False)
    op.create_index('idx_view_user_id', 'post_views', ['user_id'], unique=False)
    op.create_index('idx_view_post_id', 'post_views', ['post_id'], unique=False)
    op.create_table('posts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('posts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('habit_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('proof_urls', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('proof_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('privacy', sa.VARCHAR(), server_default=sa.text("'friends'::character varying"), autoincrement=False, nullable=False),
    sa.Column('views_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('likes_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('comments_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('habit_streak', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['habit_id'], ['habits.id'], name='posts_habit_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='posts_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='posts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_posts_id', 'posts', ['id'], unique=False)
    op.create_index('idx_post_user_created', 'posts', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_post_privacy', 'posts', ['privacy'], unique=False)
    op.create_index('idx_post_habit_streak', 'posts', ['habit_streak'], unique=False)
    op.create_index('idx_post_habit_id', 'posts', ['habit_id'], unique=False)
    op.create_index('idx_post_created_at', 'posts', ['created_at'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('messages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('conversation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message_type', sa.VARCHAR(), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'sent'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('replied_to_message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name='messages_conversation_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['replied_to_message_id'], ['messages.id'], name='fk_messages_replied_to_message_id', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='messages_sender_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='messages_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_message_status', 'messages', ['status'], unique=False)
    op.create_index('idx_message_sender', 'messages', ['sender_id'], unique=False)
    op.create_index('idx_message_replied_to', 'messages', ['replied_to_message_id'], unique=False)
    op.create_index('idx_message_conversation_created', 'messages', ['conversation_id', 'created_at'], unique=False)
    op.create_table('friendships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('friend_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['friend_id'], ['users.id'], name='friendships_friend_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='friendships_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='friendships_pkey'),
    sa.UniqueConstraint('user_id', 'friend_id', name='friendships_user_id_friend_id_key')
    )
    op.create_index('idx_friendship_user_id', 'friendships', ['user_id'], unique=False)
    op.create_index('idx_friendship_status', 'friendships', ['status'], unique=False)
    op.create_index('idx_friendship_friend_id', 'friendships', ['friend_id'], unique=False)
    op.create_table('close_friends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('close_friend_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['close_friend_id'], ['users.id'], name='close_friends_close_friend_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='close_friends_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='close_friends_pkey'),
    sa.UniqueConstraint('user_id', 'close_friend_id', name='close_friends_user_id_close_friend_id_key')
    )
    op.create_index('idx_close_friend_user_id', 'close_friends', ['user_id'], unique=False)
    op.create_index('idx_close_friend_close_friend_id', 'close_friends', ['close_friend_id'], unique=False)
    op.create_table('friend_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.id'], name='friend_requests_receiver_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='friend_requests_sender_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='friend_requests_pkey'),
    sa.UniqueConstraint('sender_id', 'receiver_id', name='friend_requests_sender_id_receiver_id_key')
    )
    op.create_index('idx_friend_request_status', 'friend_requests', ['status'], unique=False)
    op.create_index('idx_friend_request_sender_id', 'friend_requests', ['sender_id'], unique=False)
    op.create_index('idx_friend_request_receiver_id', 'friend_requests', ['receiver_id'], unique=False)
    op.create_table('post_likes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['comment_id'], ['post_comments.id'], name='post_likes_comment_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name='post_likes_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='post_likes_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='post_likes_pkey'),
    sa.UniqueConstraint('user_id', 'comment_id', name='unique_comment_like'),
    sa.UniqueConstraint('user_id', 'post_id', name='unique_post_like')
    )
    op.create_index('ix_post_likes_id', 'post_likes', ['id'], unique=False)
    op.create_index('idx_like_user_id', 'post_likes', ['user_id'], unique=False)
    op.create_index('idx_like_post_id', 'post_likes', ['post_id'], unique=False)
    op.create_index('idx_like_created_at', 'post_likes', ['created_at'], unique=False)
    op.create_index('idx_like_comment_id', 'post_likes', ['comment_id'], unique=False)
    op.create_table('post_comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_comment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('likes_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('replies_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['post_comments.id'], name='post_comments_parent_comment_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name='post_comments_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='post_comments_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='post_comments_pkey')
    )
    op.create_index('ix_post_comments_id', 'post_comments', ['id'], unique=False)
    op.create_index('idx_comment_user_id', 'post_comments', ['user_id'], unique=False)
    op.create_index('idx_comment_post_created', 'post_comments', ['post_id', 'created_at'], unique=False)
    op.create_index('idx_comment_parent_id', 'post_comments', ['parent_comment_id'], unique=False)
    op.create_table('post_reports',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reporter_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name='post_reports_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], name='post_reports_reporter_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], name='post_reports_reviewed_by_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='post_reports_pkey'),
    sa.UniqueConstraint('reporter_id', 'post_id', name='unique_post_report')
    )
    op.create_index('ix_post_reports_id', 'post_reports', ['id'], unique=False)
    op.create_index('idx_report_status', 'post_reports', ['status'], unique=False)
    op.create_index('idx_report_post_id', 'post_reports', ['post_id'], unique=False)
    op.create_index('idx_report_created_at', 'post_reports', ['created_at'], unique=False)
    op.create_table('conversation_participants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conversation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_online', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_read_message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unread_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name='conversation_participants_conversation_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['last_read_message_id'], ['messages.id'], name='conversation_participants_last_read_message_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='conversation_participants_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='conversation_participants_pkey')
    )
    op.create_index('ix_conversation_participants_id', 'conversation_participants', ['id'], unique=False)
    op.create_index('idx_participant_unread', 'conversation_participants', ['unread_count'], unique=False)
    op.create_index('idx_participant_online', 'conversation_participants', ['is_online'], unique=False)
    op.create_index('idx_participant_conversation_user', 'conversation_participants', ['conversation_id', 'user_id'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_1_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_2_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_1_id'], ['users.id'], name='conversations_participant_1_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_2_id'], ['users.id'], name='conversations_participant_2_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='conversations_pkey')
    )
    op.create_index('idx_conversation_participants', 'conversations', ['participant_1_id', 'participant_2_id'], unique=False)
    op.create_index('idx_conversation_last_message', 'conversations', ['last_message_at'], unique=False)
    # ### end Alembic commands ###