"""add_posts_tables_and_interactions

Revision ID: 62495114e156
Revises: 363101ac576a
Create Date: 2025-07-01 02:59:46.722478

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '62495114e156'
down_revision = '363101ac576a'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create posts table
    op.create_table('posts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('habit_id', sa.Integer(), nullable=True),
        sa.Column('proof_urls', sa.JSON(), nullable=False),
        sa.Column('proof_type', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('privacy', sa.String(), nullable=False, server_default='friends'),
        sa.Column('views_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('likes_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('comments_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['habit_id'], ['habits.id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_post_created_at', 'posts', ['created_at'], unique=False)
    op.create_index('idx_post_habit_id', 'posts', ['habit_id'], unique=False)
    op.create_index('idx_post_privacy', 'posts', ['privacy'], unique=False)
    op.create_index('idx_post_user_created', 'posts', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)

    # Create post_comments table
    op.create_table('post_comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('parent_comment_id', sa.Integer(), nullable=True),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('likes_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('replies_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['parent_comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_comment_parent_id', 'post_comments', ['parent_comment_id'], unique=False)
    op.create_index('idx_comment_post_created', 'post_comments', ['post_id', 'created_at'], unique=False)
    op.create_index('idx_comment_user_id', 'post_comments', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_comments_id'), 'post_comments', ['id'], unique=False)

    # Create post_likes table
    op.create_table('post_likes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.Column('comment_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'comment_id', name='unique_comment_like'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_like')
    )
    op.create_index('idx_like_comment_id', 'post_likes', ['comment_id'], unique=False)
    op.create_index('idx_like_created_at', 'post_likes', ['created_at'], unique=False)
    op.create_index('idx_like_post_id', 'post_likes', ['post_id'], unique=False)
    op.create_index('idx_like_user_id', 'post_likes', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_likes_id'), 'post_likes', ['id'], unique=False)

    # Create post_views table
    op.create_table('post_views',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('view_duration', sa.Integer(), nullable=True),
        sa.Column('viewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_view')
    )
    op.create_index('idx_view_post_id', 'post_views', ['post_id'], unique=False)
    op.create_index('idx_view_user_id', 'post_views', ['user_id'], unique=False)
    op.create_index('idx_view_viewed_at', 'post_views', ['viewed_at'], unique=False)
    op.create_index(op.f('ix_post_views_id'), 'post_views', ['id'], unique=False)

    # Create post_reports table
    op.create_table('post_reports',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('reporter_id', sa.Integer(), nullable=False),
        sa.Column('reason', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=False, server_default='pending'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('reviewed_by', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('reporter_id', 'post_id', name='unique_post_report')
    )
    op.create_index('idx_report_created_at', 'post_reports', ['created_at'], unique=False)
    op.create_index('idx_report_post_id', 'post_reports', ['post_id'], unique=False)
    op.create_index('idx_report_status', 'post_reports', ['status'], unique=False)
    op.create_index(op.f('ix_post_reports_id'), 'post_reports', ['id'], unique=False)

    # Drop old close_friends table (will be recreated by separate migration)
    op.drop_index('idx_close_friend_close_friend_id', table_name='close_friends')
    op.drop_index('idx_close_friend_user_id', table_name='close_friends')
    op.drop_table('close_friends')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop posts tables
    op.drop_index(op.f('ix_post_reports_id'), table_name='post_reports')
    op.drop_index('idx_report_status', table_name='post_reports')
    op.drop_index('idx_report_post_id', table_name='post_reports')
    op.drop_index('idx_report_created_at', table_name='post_reports')
    op.drop_table('post_reports')

    op.drop_index(op.f('ix_post_views_id'), table_name='post_views')
    op.drop_index('idx_view_viewed_at', table_name='post_views')
    op.drop_index('idx_view_user_id', table_name='post_views')
    op.drop_index('idx_view_post_id', table_name='post_views')
    op.drop_table('post_views')

    op.drop_index(op.f('ix_post_likes_id'), table_name='post_likes')
    op.drop_index('idx_like_user_id', table_name='post_likes')
    op.drop_index('idx_like_post_id', table_name='post_likes')
    op.drop_index('idx_like_created_at', table_name='post_likes')
    op.drop_index('idx_like_comment_id', table_name='post_likes')
    op.drop_table('post_likes')

    op.drop_index(op.f('ix_post_comments_id'), table_name='post_comments')
    op.drop_index('idx_comment_user_id', table_name='post_comments')
    op.drop_index('idx_comment_post_created', table_name='post_comments')
    op.drop_index('idx_comment_parent_id', table_name='post_comments')
    op.drop_table('post_comments')

    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_index('idx_post_user_created', table_name='posts')
    op.drop_index('idx_post_privacy', table_name='posts')
    op.drop_index('idx_post_habit_id', table_name='posts')
    op.drop_index('idx_post_created_at', table_name='posts')
    op.drop_table('posts')

    # Recreate close_friends table
    op.create_table('close_friends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('close_friend_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['close_friend_id'], ['users.id'], name='close_friends_close_friend_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='close_friends_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='close_friends_pkey'),
    sa.UniqueConstraint('user_id', 'close_friend_id', name='unique_close_friend')
    )
    op.create_index('idx_close_friend_user_id', 'close_friends', ['user_id'], unique=False)
    op.create_index('idx_close_friend_close_friend_id', 'close_friends', ['close_friend_id'], unique=False)
    # ### end Alembic commands ###
    op.create_index('idx_post_user_created', 'posts', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)

    # Create post_comments table
    op.create_table('post_comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('parent_comment_id', sa.Integer(), nullable=True),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('likes_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('replies_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['parent_comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_comment_parent_id', 'post_comments', ['parent_comment_id'], unique=False)
    op.create_index('idx_comment_post_created', 'post_comments', ['post_id', 'created_at'], unique=False)
    op.create_index('idx_comment_user_id', 'post_comments', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_comments_id'), 'post_comments', ['id'], unique=False)

    # Create post_likes table
    op.create_table('post_likes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.Column('comment_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'comment_id', name='unique_comment_like'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_like')
    )
    op.create_index('idx_like_comment_id', 'post_likes', ['comment_id'], unique=False)
    op.create_index('idx_like_created_at', 'post_likes', ['created_at'], unique=False)
    op.create_index('idx_like_post_id', 'post_likes', ['post_id'], unique=False)
    op.create_index('idx_like_user_id', 'post_likes', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_likes_id'), 'post_likes', ['id'], unique=False)

    # Create post_views table
    op.create_table('post_views',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('view_duration', sa.Integer(), nullable=True),
        sa.Column('viewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_view')
    )
    op.create_index('idx_view_post_id', 'post_views', ['post_id'], unique=False)
    op.create_index('idx_view_user_id', 'post_views', ['user_id'], unique=False)
    op.create_index('idx_view_viewed_at', 'post_views', ['viewed_at'], unique=False)
    op.create_index(op.f('ix_post_views_id'), 'post_views', ['id'], unique=False)

    # Create post_reports table
    op.create_table('post_reports',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('reporter_id', sa.Integer(), nullable=False),
        sa.Column('reason', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=False, server_default='pending'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('reviewed_by', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('reporter_id', 'post_id', name='unique_post_report')
    )
    op.create_index('idx_report_created_at', 'post_reports', ['created_at'], unique=False)
    op.create_index('idx_report_post_id', 'post_reports', ['post_id'], unique=False)
    op.create_index('idx_report_status', 'post_reports', ['status'], unique=False)
    op.create_index(op.f('ix_post_reports_id'), 'post_reports', ['id'], unique=False)

    # Drop old close_friends table (will be recreated by separate migration)
    op.drop_index('idx_close_friend_close_friend_id', table_name='close_friends')
    op.drop_index('idx_close_friend_user_id', table_name='close_friends')
    op.drop_table('close_friends')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop posts tables
    op.drop_index(op.f('ix_post_reports_id'), table_name='post_reports')
    op.drop_index('idx_report_status', table_name='post_reports')
    op.drop_index('idx_report_post_id', table_name='post_reports')
    op.drop_index('idx_report_created_at', table_name='post_reports')
    op.drop_table('post_reports')

    op.drop_index(op.f('ix_post_views_id'), table_name='post_views')
    op.drop_index('idx_view_viewed_at', table_name='post_views')
    op.drop_index('idx_view_user_id', table_name='post_views')
    op.drop_index('idx_view_post_id', table_name='post_views')
    op.drop_table('post_views')

    op.drop_index(op.f('ix_post_likes_id'), table_name='post_likes')
    op.drop_index('idx_like_user_id', table_name='post_likes')
    op.drop_index('idx_like_post_id', table_name='post_likes')
    op.drop_index('idx_like_created_at', table_name='post_likes')
    op.drop_index('idx_like_comment_id', table_name='post_likes')
    op.drop_table('post_likes')

    op.drop_index(op.f('ix_post_comments_id'), table_name='post_comments')
    op.drop_index('idx_comment_user_id', table_name='post_comments')
    op.drop_index('idx_comment_post_created', table_name='post_comments')
    op.drop_index('idx_comment_parent_id', table_name='post_comments')
    op.drop_table('post_comments')

    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_index('idx_post_user_created', table_name='posts')
    op.drop_index('idx_post_privacy', table_name='posts')
    op.drop_index('idx_post_habit_id', table_name='posts')
    op.drop_index('idx_post_created_at', table_name='posts')
    op.drop_table('posts')

    # Recreate close_friends table
    op.create_table('close_friends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('close_friend_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['close_friend_id'], ['users.id'], name='close_friends_close_friend_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='close_friends_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='close_friends_pkey'),
    sa.UniqueConstraint('user_id', 'close_friend_id', name='unique_close_friend')
    )
    op.create_index('idx_close_friend_user_id', 'close_friends', ['user_id'], unique=False)
    op.create_index('idx_close_friend_close_friend_id', 'close_friends', ['close_friend_id'], unique=False)
    # ### end Alembic commands ###
    op.create_index('idx_post_user_created', 'posts', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)

    # Create post_comments table
    op.create_table('post_comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('parent_comment_id', sa.Integer(), nullable=True),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('likes_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('replies_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['parent_comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_comment_parent_id', 'post_comments', ['parent_comment_id'], unique=False)
    op.create_index('idx_comment_post_created', 'post_comments', ['post_id', 'created_at'], unique=False)
    op.create_index('idx_comment_user_id', 'post_comments', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_comments_id'), 'post_comments', ['id'], unique=False)

    # Create post_likes table
    op.create_table('post_likes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.Column('comment_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'comment_id', name='unique_comment_like'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_like')
    )
    op.create_index('idx_like_comment_id', 'post_likes', ['comment_id'], unique=False)
    op.create_index('idx_like_created_at', 'post_likes', ['created_at'], unique=False)
    op.create_index('idx_like_post_id', 'post_likes', ['post_id'], unique=False)
    op.create_index('idx_like_user_id', 'post_likes', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_likes_id'), 'post_likes', ['id'], unique=False)

    # Create post_views table
    op.create_table('post_views',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('view_duration', sa.Integer(), nullable=True),
        sa.Column('viewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_view')
    )
    op.create_index('idx_view_post_id', 'post_views', ['post_id'], unique=False)
    op.create_index('idx_view_user_id', 'post_views', ['user_id'], unique=False)
    op.create_index('idx_view_viewed_at', 'post_views', ['viewed_at'], unique=False)
    op.create_index(op.f('ix_post_views_id'), 'post_views', ['id'], unique=False)

    # Create post_reports table
    op.create_table('post_reports',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('reporter_id', sa.Integer(), nullable=False),
        sa.Column('reason', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=False, server_default='pending'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('reviewed_by', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('reporter_id', 'post_id', name='unique_post_report')
    )
    op.create_index('idx_report_created_at', 'post_reports', ['created_at'], unique=False)
    op.create_index('idx_report_post_id', 'post_reports', ['post_id'], unique=False)
    op.create_index('idx_report_status', 'post_reports', ['status'], unique=False)
    op.create_index(op.f('ix_post_reports_id'), 'post_reports', ['id'], unique=False)

    # Drop old close_friends table (will be recreated by separate migration)
    op.drop_index('idx_close_friend_close_friend_id', table_name='close_friends')
    op.drop_index('idx_close_friend_user_id', table_name='close_friends')
    op.drop_table('close_friends')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop posts tables
    op.drop_index(op.f('ix_post_reports_id'), table_name='post_reports')
    op.drop_index('idx_report_status', table_name='post_reports')
    op.drop_index('idx_report_post_id', table_name='post_reports')
    op.drop_index('idx_report_created_at', table_name='post_reports')
    op.drop_table('post_reports')

    op.drop_index(op.f('ix_post_views_id'), table_name='post_views')
    op.drop_index('idx_view_viewed_at', table_name='post_views')
    op.drop_index('idx_view_user_id', table_name='post_views')
    op.drop_index('idx_view_post_id', table_name='post_views')
    op.drop_table('post_views')

    op.drop_index(op.f('ix_post_likes_id'), table_name='post_likes')
    op.drop_index('idx_like_user_id', table_name='post_likes')
    op.drop_index('idx_like_post_id', table_name='post_likes')
    op.drop_index('idx_like_created_at', table_name='post_likes')
    op.drop_index('idx_like_comment_id', table_name='post_likes')
    op.drop_table('post_likes')

    op.drop_index(op.f('ix_post_comments_id'), table_name='post_comments')
    op.drop_index('idx_comment_user_id', table_name='post_comments')
    op.drop_index('idx_comment_post_created', table_name='post_comments')
    op.drop_index('idx_comment_parent_id', table_name='post_comments')
    op.drop_table('post_comments')

    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_index('idx_post_user_created', table_name='posts')
    op.drop_index('idx_post_privacy', table_name='posts')
    op.drop_index('idx_post_habit_id', table_name='posts')
    op.drop_index('idx_post_created_at', table_name='posts')
    op.drop_table('posts')

    # Recreate close_friends table
    op.create_table('close_friends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('close_friend_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['close_friend_id'], ['users.id'], name='close_friends_close_friend_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='close_friends_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='close_friends_pkey'),
    sa.UniqueConstraint('user_id', 'close_friend_id', name='unique_close_friend')
    )
    op.create_index('idx_close_friend_user_id', 'close_friends', ['user_id'], unique=False)
    op.create_index('idx_close_friend_close_friend_id', 'close_friends', ['close_friend_id'], unique=False)
    # ### end Alembic commands ###
    op.create_index('idx_post_user_created', 'posts', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)

    # Create post_comments table
    op.create_table('post_comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('parent_comment_id', sa.Integer(), nullable=True),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('likes_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('replies_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['parent_comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_comment_parent_id', 'post_comments', ['parent_comment_id'], unique=False)
    op.create_index('idx_comment_post_created', 'post_comments', ['post_id', 'created_at'], unique=False)
    op.create_index('idx_comment_user_id', 'post_comments', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_comments_id'), 'post_comments', ['id'], unique=False)

    # Create post_likes table
    op.create_table('post_likes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.Column('comment_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['comment_id'], ['post_comments.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'comment_id', name='unique_comment_like'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_like')
    )
    op.create_index('idx_like_comment_id', 'post_likes', ['comment_id'], unique=False)
    op.create_index('idx_like_created_at', 'post_likes', ['created_at'], unique=False)
    op.create_index('idx_like_post_id', 'post_likes', ['post_id'], unique=False)
    op.create_index('idx_like_user_id', 'post_likes', ['user_id'], unique=False)
    op.create_index(op.f('ix_post_likes_id'), 'post_likes', ['id'], unique=False)

    # Create post_views table
    op.create_table('post_views',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('view_duration', sa.Integer(), nullable=True),
        sa.Column('viewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'post_id', name='unique_post_view')
    )
    op.create_index('idx_view_post_id', 'post_views', ['post_id'], unique=False)
    op.create_index('idx_view_user_id', 'post_views', ['user_id'], unique=False)
    op.create_index('idx_view_viewed_at', 'post_views', ['viewed_at'], unique=False)
    op.create_index(op.f('ix_post_views_id'), 'post_views', ['id'], unique=False)

    # Create post_reports table
    op.create_table('post_reports',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('reporter_id', sa.Integer(), nullable=False),
        sa.Column('reason', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=False, server_default='pending'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('reviewed_by', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('reporter_id', 'post_id', name='unique_post_report')
    )
    op.create_index('idx_report_created_at', 'post_reports', ['created_at'], unique=False)
    op.create_index('idx_report_post_id', 'post_reports', ['post_id'], unique=False)
    op.create_index('idx_report_status', 'post_reports', ['status'], unique=False)
    op.create_index(op.f('ix_post_reports_id'), 'post_reports', ['id'], unique=False)

    # Drop old close_friends table (will be recreated by separate migration)
    op.drop_index('idx_close_friend_close_friend_id', table_name='close_friends')
    op.drop_index('idx_close_friend_user_id', table_name='close_friends')
    op.drop_table('close_friends')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop posts tables
    op.drop_index(op.f('ix_post_reports_id'), table_name='post_reports')
    op.drop_index('idx_report_status', table_name='post_reports')
    op.drop_index('idx_report_post_id', table_name='post_reports')
    op.drop_index('idx_report_created_at', table_name='post_reports')
    op.drop_table('post_reports')

    op.drop_index(op.f('ix_post_views_id'), table_name='post_views')
    op.drop_index('idx_view_viewed_at', table_name='post_views')
    op.drop_index('idx_view_user_id', table_name='post_views')
    op.drop_index('idx_view_post_id', table_name='post_views')
    op.drop_table('post_views')

    op.drop_index(op.f('ix_post_likes_id'), table_name='post_likes')
    op.drop_index('idx_like_user_id', table_name='post_likes')
    op.drop_index('idx_like_post_id', table_name='post_likes')
    op.drop_index('idx_like_created_at', table_name='post_likes')
    op.drop_index('idx_like_comment_id', table_name='post_likes')
    op.drop_table('post_likes')

    op.drop_index(op.f('ix_post_comments_id'), table_name='post_comments')
    op.drop_index('idx_comment_user_id', table_name='post_comments')
    op.drop_index('idx_comment_post_created', table_name='post_comments')
    op.drop_index('idx_comment_parent_id', table_name='post_comments')
    op.drop_table('post_comments')

    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_index('idx_post_user_created', table_name='posts')
    op.drop_index('idx_post_privacy', table_name='posts')
    op.drop_index('idx_post_habit_id', table_name='posts')
    op.drop_index('idx_post_created_at', table_name='posts')
    op.drop_table('posts')

    # Recreate close_friends table
    op.create_table('close_friends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('close_friend_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['close_friend_id'], ['users.id'], name='close_friends_close_friend_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='close_friends_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='close_friends_pkey'),
    sa.UniqueConstraint('user_id', 'close_friend_id', name='unique_close_friend')
    )
    op.create_index('idx_close_friend_user_id', 'close_friends', ['user_id'], unique=False)
    op.create_index('idx_close_friend_close_friend_id', 'close_friends', ['close_friend_id'], unique=False)