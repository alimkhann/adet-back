"""add_proof_validation_enhancements

Revision ID: cab5f04f9559
Revises: c167d36297a9
Create Date: 2025-06-29 19:47:13.117604

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cab5f04f9559'
down_revision = 'c167d36297a9'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    conn = op.get_bind()
    # Conditionally drop constraint if it exists
    constraint_exists = conn.execute(
        sa.text("SELECT 1 FROM information_schema.table_constraints WHERE table_name='users' AND constraint_name='users_username_key'")
    ).scalar()
    if constraint_exists:
        op.drop_constraint('users_username_key', 'users', type_='unique')
    # Conditionally drop columns if they exist
    for col in ['bio', 'name', 'profile_image_url']:
        col_exists = conn.execute(
            sa.text(f"SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='{col}'")
        ).scalar()
        if col_exists:
            op.drop_column('users', col)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('profile_image_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('bio', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###